
*****************************************************
Summary
-------
Notes: 0
Binaries: 0
Archives: 0
Standards: 3

Apache Licensed: 2
Generated Documents: 0

JavaDocs are generated and so license header is optional
Generated files do not required license headers

1 Unknown Licenses

*******************************

Unapproved licenses:

  src/main/java/TweetSource.java

*******************************

Archives:

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require AL headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc will be marked N
  AL    pom.xml
  AL    scripts/saveVersion.sh
 !????? src/main/java/TweetSource.java
 
 *****************************************************
 Printing headers for files without AL header...
 
 
 =======================================================================
 ==src/main/java/TweetSource.java
 =======================================================================
import org.apache.flume.*;
import org.apache.flume.conf.Configurable;
import org.apache.flume.event.EventBuilder;
import org.apache.flume.source.AbstractSource;
import org.apache.flume.source.avro.Status;
import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A class representing a window on the screen.
 * For example:
 * <pre>
 *    Window win = new Window(parent);
 *    win.show();
 * </pre>
 *
 * @author <A HREF="mailto:[kiora1120@gmail.com]">TJune Kim</A>
 * @version 1.0
 */
public class TweetSource extends AbstractSource implements Configurable, PollableSource {
    private static final Logger logger = LoggerFactory.getLogger(TweetSource.class);
    private String track;

    @Override
    public void configure(Context context) {
        //todo 인증 키 받는 부분 넣어야 함.
        track = context.getString("track");
//    some_Param = context.get("some_param", String.class);
        // process some_param …
    }

    @Override
    public void start() {
        logger.info("Starting {}...", this);
        super.start();
        logger.info("Tweet source {} started.", getName());
    }

    @Override
    public void stop() {
        logger.info("Avro source {} stopping: {}", getName(), this);
        super.stop();
    }

    @Override
    public Status process() throws EventDeliveryException {
        try {
            // receive new data
            Event e = EventBuilder.withBody("test".getBytes());
